import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches

def draw_pitch(ax):
    """
    Draws a horizontal soccer pitch on a given matplotlib axes object.
    The pitch dimensions are rectangular based on a 105x68m standard.
    """
    # Define the aspect ratio of a standard pitch (e.g., 105m long x 68m wide)
    WIDTH_SCALE = 68 / 105

    # Pitch dimensions (horizontal orientation)
    x_min, x_max = -1, 1
    y_min, y_max = -1 * WIDTH_SCALE, 1 * WIDTH_SCALE

    # Set axis limits and aspect ratio
    ax.set_xlim(x_min - 0.1, x_max + 0.1)
    ax.set_ylim(y_min - 0.2, y_max + 0.2) # Margin for attacking arrow
    ax.set_aspect('equal', adjustable='box')

    # Pitch background
    ax.add_patch(patches.Rectangle((x_min, y_min), 2, y_max - y_min, facecolor='white', zorder=0))

    # Pitch lines
    line_color = 'black'
    line_width = 2

    # Outer lines
    ax.plot([x_min, x_max], [y_min, y_min], color=line_color, linewidth=line_width, zorder=1)
    ax.plot([x_min, x_max], [y_max, y_max], color=line_color, linewidth=line_width, zorder=1)
    ax.plot([x_min, x_min], [y_min, y_max], color=line_color, linewidth=line_width, zorder=1)
    ax.plot([x_max, x_max], [y_min, y_max], color=line_color, linewidth=line_width, zorder=1)

    # Halfway line
    ax.plot([0, 0], [y_min, y_max], color=line_color, linewidth=line_width, zorder=1)

    # Center circle and spot
    center_circle = patches.Circle((0, 0), radius=0.174, edgecolor=line_color, facecolor='none', linewidth=line_width, zorder=1)
    center_spot = patches.Circle((0, 0), radius=0.01, color=line_color, zorder=1)
    ax.add_patch(center_circle)
    ax.add_patch(center_spot)

    # Penalty areas (proportions based on a standard 105x68m pitch)
    pa_width_prop = 40.3 / 68
    pa_depth_prop = 16.5 / 105
    pa_width = pa_width_prop * (y_max - y_min)
    pa_depth = pa_depth_prop * (x_max - x_min)
    
    # Right penalty area
    ax.add_patch(patches.Rectangle((x_max - pa_depth, -pa_width / 2), pa_depth, pa_width, edgecolor=line_color, facecolor='none', linewidth=line_width, zorder=1))
    # Left penalty area
    ax.add_patch(patches.Rectangle((x_min, -pa_width / 2), pa_depth, pa_width, edgecolor=line_color, facecolor='none', linewidth=line_width, zorder=1))

    # Goal areas
    ga_width_prop = 18.32 / 68
    ga_depth_prop = 5.5 / 105
    ga_width = ga_width_prop * (y_max - y_min)
    ga_depth = ga_depth_prop * (x_max - x_min)

    # Right goal area
    ax.add_patch(patches.Rectangle((x_max - ga_depth, -ga_width / 2), ga_depth, ga_width, edgecolor=line_color, facecolor='none', linewidth=line_width, zorder=1))
    # Left goal area
    ax.add_patch(patches.Rectangle((x_min, -ga_width / 2), ga_depth, ga_width, edgecolor=line_color, facecolor='none', linewidth=line_width, zorder=1))
    
    # Penalty spots
    penalty_spot_dist_prop = (11 / 105) * 2
    ax.add_patch(patches.Circle((x_max - penalty_spot_dist_prop, 0), 0.01, color=line_color, zorder=1))
    ax.add_patch(patches.Circle((x_min + penalty_spot_dist_prop, 0), 0.01, color=line_color, zorder=1))

    # Remove axis ticks and labels
    ax.set_xticks([])
    ax.set_yticks([])

def visualize_passes(csv_file, team_name=None, player_name=None):
    """
    Loads pass data, normalizes it, and plots all passes in 15-minute
    intervals on a 2x3 grid of pitches.
    
    Args:
        csv_file (str): The path to the CSV file.
        team_name (str, optional): The name of the team to visualize. Ignored if player_name is set.
        player_name (str, optional): The name of the player to visualize.
    """
    try:
        df = pd.read_csv(csv_file)
    except FileNotFoundError:
        print(f"Error: The file '{csv_file}' was not found.")
        return

    # Filter data based on player or team
    if player_name:
        plot_df = df[df['player_name'] == player_name].copy()
        main_title = f'Pass Map for {player_name} in 15-Minute Intervals'
    elif team_name:
        plot_df = df[df['team_name'] == team_name].copy()
        main_title = f'Pass Map for {team_name} in 15-Minute Intervals'
    else:
        plot_df = df.copy()
        main_title = 'Pass Map for All Teams in 15-Minute Intervals'
        
    if plot_df.empty:
        print("No data found for the specified filter.")
        return
        
    # --- Data Normalization ---
    # 1. Flip all y-coordinates to horizontally mirror the pitch view.
    plot_df[['y1', 'y2']] *= -1
    
    # 2. Invert coordinates for SECOND half passes to show all attacking L->R
    second_half_mask = plot_df['minute'] > 45
    coords_to_flip = ['x1', 'y1', 'x2', 'y2']
    plot_df.loc[second_half_mask, coords_to_flip] *= -1

    # Define the 15-minute intervals
    intervals = [
        (0, 15, '0-15 Minutes'),
        (15, 30, '15-30 Minutes'),
        (30, 45, '30-45 Minutes'),
        (45, 60, '45-60 Minutes'),
        (60, 75, '60-75 Minutes'),
        (75, 200, '75+ Minutes') # Use a large number to include stoppage time
    ]

    # Define the scaling factor used to draw the pitch
    WIDTH_SCALE = 68 / 105

    # Create the plot with a 2x3 grid of subplots
    fig, axes = plt.subplots(2, 3, figsize=((12 / WIDTH_SCALE) * 1.5, 12 * 1.5))
    fig.patch.set_facecolor('#f4f4f4')
    
    fig.suptitle(main_title, fontsize=24, fontweight='bold')
    
    axes = axes.flatten() # Flatten for easy iteration

    for i, (start_min, end_min, title) in enumerate(intervals):
        ax = axes[i]
        draw_pitch(ax)
        ax.set_title(title, fontsize=16, pad=20)

        # Add attacking direction indicator
        y_max = 1 * WIDTH_SCALE
        ax.text(0, y_max + 0.12, 'Attacking Direction', ha='center', va='center', fontsize=12, fontweight='bold')
        attack_arrow = patches.FancyArrowPatch(
            (-0.6, y_max + 0.08), (0.6, y_max + 0.08),
            arrowstyle='->', mutation_scale=30, color='black', lw=2
        )
        ax.add_patch(attack_arrow)

        # Filter the dataframe for the current interval
        interval_df = plot_df[(plot_df['minute'] >= start_min) & (plot_df['minute'] < end_min)].copy()

        # Plot all passes for the current type
        for _, row in interval_df.iterrows():
            start_x, start_y = row['x1'], row['y1'] * WIDTH_SCALE
            end_x, end_y = row['x2'], row['y2'] * WIDTH_SCALE
            event_type = row['event_type']
            
            if event_type == 'correctPasses':
                color = '#3498db'
                style = '-'
            elif event_type == 'incorrectPasses':
                color = '#e74c3c'
                style = '--'
            else:
                continue

            arrow = patches.FancyArrowPatch(
                (start_x, start_y), 
                (end_x, end_y), 
                arrowstyle='->', 
                mutation_scale=15, 
                color=color,
                linestyle=style,
                alpha=0.7,
                linewidth=1.5
            )
            ax.add_patch(arrow)

    # Add a single legend for the entire figure
    correct_pass_legend = plt.Line2D([0], [0], color='#3498db', lw=2, label='Correct Pass')
    incorrect_pass_legend = plt.Line2D([0], [0], color='#e74c3c', lw=2, linestyle='--', label='Incorrect Pass')
    fig.legend(handles=[correct_pass_legend, incorrect_pass_legend], loc='upper right', fontsize=14)

    # Adjust layout, save, and show the plot
    fig.tight_layout(rect=[0, 0, 1, 0.95]) # Adjust for suptitle
    plt.savefig('soccer_pass_map_intervals.png', dpi=300)
    plt.show()

if __name__ == '__main__':
    # --- Instructions ---
    # 1. Make sure 'RacSanDataFactory.csv' is in the same directory as this script.
    # 2. To see passes for a specific player, set 'player_to_visualize' to their name.
    # 3. To see all passes for a team, set 'player_to_visualize = None' and set 'team_to_visualize' to the team name.
    # 4. To see all passes from all teams, set both to None.
    # ------------------
    
    csv_filename = '/Users/gustavoortiz/Downloads/SLvsRojo.csv'
    team_to_visualize = None # Set to None to show all teams
    player_to_visualize = None # Set to None to show all players
    
    visualize_passes(csv_filename, team_name=team_to_visualize, player_name=player_to_visualize)
